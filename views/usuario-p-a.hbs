<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <title>Tabla de Usuarios</title>

    <!-- Incluye los estilos CSS de Bootstrap -->
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css">

    <!-- Agrega cualquier otro estilo personalizado que necesites -->

</head>
<body>
    <div class="container">
        <div id="tablaUsuarios" class="row justify-content-center">
            <div class="col-lg-10">
                <div class="form-group">
                    <label for="buscarCui">Buscar por CUI:</label>
                    <input id="buscarCui" type="text" class="form-control" placeholder="Ingrese el CUI" onkeyup="buscarPorCui()">
                </div>
                <div class="form-group">
                    <label for="buscarPa">Buscar por Punto de Atención:</label>
                    <input id="buscarPa" type="text" class="form-control" placeholder="Ingrese el Punto de Atención" onkeyup="buscarPorPa()">
                </div>

                <table id="usuariosTable" class="table" data-pagination="true" data-page-size="5">
                    <thead>
                        <tr>
                            <th>Usuario</th>
                            <th>Nombres</th>
                            <th>Apellidos</th>
                            <th>CUI</th>
                            <th>P A</th>
                            <th>Cargo</th>
                            <th>Acciones</th>
                        </tr>
                    </thead>
                    <tbody id="tablaUsuariosBody">
                        <!-- Aquí se mostrarán los usuarios -->
                    </tbody>
                </table>
            </div>
        </div>
    </div>

    <!-- Modal para editar usuario -->
    <div class="modal fade" id="editarModal" tabindex="-1" aria-labelledby="editarModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="editarModalLabel">Editar Usuario</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <form>
                        <div class="mb-3">
                            <label for="usuarioInput" class="form-label">Usuario</label>
                            <input type="text" class="form-control" id="usuarioInput" placeholder="Ingrese el usuario">
                        </div>
                        <div class="mb-3">
                            <label for="nombresInput" class="form-label">Nombres</label>
                            <input type="text" class="form-control" id="nombresInput" placeholder="Ingrese los nombres">
                        </div>
                        <div class="mb-3">
                            <label for="apellidosInput" class="form-label">Apellidos</label>
                            <input type="text" class="form-control" id="apellidosInput" placeholder="Ingrese los apellidos">
                        </div>
                        <div class="mb-3">
                            <label for="cuiInput" class="form-label">CUI</label>
                            <input type="text" class="form-control" id="cuiInput" placeholder="Ingrese el CUI">
                        </div>
                        <div class="mb-3">
                            <label for="correoInput" class="form-label">Correo Electrónico</label>
                            <input type="email" class="form-control" id="correoInput" placeholder="Ingrese el correo electrónico">
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancelar</button>
                    <button type="button" class="btn btn-primary" data-bs-dismiss="modal">Guardar</button>

                </div>
            </div>
        </div>
    </div>

    <!-- Incluye el script JavaScript de Bootstrap -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>

    <!-- Agrega cualquier otro script personalizado que necesites -->
    <script type="text/javascript">
        let jwt = localStorage.jwt;
        const header = new Headers();
        header.append('authorization', `Bearer ${jwt}`);
        header.append('Accept', `application/json`);
        header.append('Content-Type', `application/json`);

        document.addEventListener('DOMContentLoaded', async () => {
            await cargarUsuarios();
        });

        const cargarUsuarios = async () => {
            const response = await fetch('/api/usuarioPunto/obtenerusuariosPA', {
                method: "GET",
                headers: header,
            });

            if (response.ok) {
                const data = await response.json();
                const resultadoConsulta = data.resultadoConsulta;
                const tablaBody = document.getElementById('tablaUsuariosBody');

                resultadoConsulta.forEach(usuario => {
                    const row = document.createElement('tr');
                    const usuarioCell = document.createElement('td');
                    usuarioCell.textContent = usuario.Usuario;

                    const nombresCell = document.createElement('td');
                    nombresCell.textContent = usuario.Nombres;

                    const apellidosCell = document.createElement('td');
                    apellidosCell.textContent = usuario.Apellidos;

                    const cuiCell = document.createElement('td');
                    cuiCell.textContent = usuario.Cui;

                    const paCell = document.createElement('td');
                    paCell.textContent = usuario.Descripcion1;

                    const cargoCell = document.createElement('td');
                    cargoCell.textContent = usuario.Descripcion;

                    const accionesCell = document.createElement('td');
                    const editarBtn = document.createElement('button');
                    editarBtn.textContent = 'Editar';
                    editarBtn.className = 'btn btn-primary btn-sm';
                    editarBtn.setAttribute('data-bs-toggle', 'modal'); // Agregar el atributo data-bs-toggle
                    editarBtn.setAttribute('data-bs-target', '#editarModal'); // Agregar el atributo data-bs-target
                    editarBtn.addEventListener('click', () => editarUsuario(usuario));

                    const eliminarBtn = document.createElement('button');
                    eliminarBtn.textContent = 'Eliminar';
                    eliminarBtn.className = 'btn btn-danger btn-sm';
                    eliminarBtn.addEventListener('click', () => eliminarUsuario(usuario));

                    accionesCell.appendChild(editarBtn);
                    accionesCell.appendChild(eliminarBtn);

                    row.appendChild(usuarioCell);
                    row.appendChild(nombresCell);
                    row.appendChild(apellidosCell);
                    row.appendChild(cuiCell);
                    row.appendChild(paCell);
                    row.appendChild(cargoCell);
                    row.appendChild(accionesCell);

                    tablaBody.appendChild(row);
                });
            } else {
                console.error(`Error al obtener usuarios: ${response.status}`);
            }
        };

        const buscarPorCui = () => {
            const input = document.getElementById('buscarCui');
            const filter = input.value.toUpperCase();
            const table = document.getElementById('usuariosTable');
            const tbody = table.getElementsByTagName('tbody')[0];
            const rows = tbody.getElementsByTagName('tr');

            for (let i = 0; i < rows.length; i++) {
                const cuiCell = rows[i].getElementsByTagName('td')[3];
                const cuiText = cuiCell.textContent || cuiCell.innerText;

                if (cuiText.toUpperCase().includes(filter)) {
                    rows[i].style.display = '';
                } else {
                    rows[i].style.display = 'none';
                }
            }
        };

        const buscarPorPa = () => {
            const input = document.getElementById('buscarPa');
            const filter = input.value.toUpperCase();
            const table = document.getElementById('usuariosTable');
            const tbody = table.getElementsByTagName('tbody')[0];
            const rows = tbody.getElementsByTagName('tr');

            for (let i = 0; i < rows.length; i++) {
                const paCell = rows[i].getElementsByTagName('td')[4];
                const paText = paCell.textContent || paCell.innerText;

                if (paText.toUpperCase().includes(filter)) {
                    rows[i].style.display = '';
                } else {
                    rows[i].style.display = 'none';
                }
            }
        };

        const editarUsuario = async (usuario) => {
           const { Usuario, Nombres, Apellidos, Cui, Correo_Email, Id_Cargo, Id_PuntoA } = usuario;
  const usuarioInput = document.getElementById('usuarioInput');
  const nombresInput = document.getElementById('nombresInput');
  const apellidosInput = document.getElementById('apellidosInput');
  const cuiInput = document.getElementById('cuiInput');
  const correoInput = document.getElementById('correoInput');
  const idCargoInput = document.getElementById('idCargoInput');
  const idPuntoAInput = document.getElementById('idPuntoAInput');

  usuarioInput.value = Usuario;
  usuarioInput.disabled = true; // Deshabilitar el campo de entrada
  nombresInput.value = Nombres;
  nombresInput.disabled = true; // Deshabilitar el campo de entrada
  apellidosInput.value = Apellidos;
  apellidosInput.disabled = true; // Deshabilitar el campo de entrada
  cuiInput.value = Cui;
  cuiInput.disabled = true; // Deshabilitar el campo de entrada
  correoInput.value = Correo_Email;
  correoInput.disabled = true; // Deshabilitar el campo de entrada
  idCargoInput.value = Id_Cargo;
  idPuntoAInput.value = Id_PuntoA;
        };
        const guardarUsuario = async () => {
  const usuarioInput = document.getElementById('usuarioInput');
  const nombresInput = document.getElementById('nombresInput');
  const apellidosInput = document.getElementById('apellidosInput');
  const cuiInput = document.getElementById('cuiInput');
  const correoInput = document.getElementById('correoInput');

  const Usuario = usuarioInput.value;
  const Nombres = nombresInput.value;
  const Apellidos = apellidosInput.value;
  const Cui = cuiInput.value;
  const Correo_Email = correoInput.value;

  const token = localStorage.jwt;
  const header = new Headers();
  header.append('authorization', `Bearer ${token}`);
  header.append('Accept', 'application/json');
  header.append('Content-Type', 'application/json');

  const response = await fetch('/api/usuarioPunto/asignarPuntoUsuario', {
    method: 'POST',
    headers: header,
    body: JSON.stringify({ Usuario, Nombres, Apellidos, Cui, Correo_Email }),
  });

  if (response.ok) {
    const data = await response.json();
    // Handle successful response
    console.log(data);
  } else {
    // Handle error response
    console.error('Error:', response.status);
  }
};


      const eliminarUsuario = async (usuario) => {
  const { Usuario } = usuario;

  const response = await fetch('/api/usuarioPunto/eliminarPuntoUsuario', {
    method: 'POST',
    headers: header,
    body: JSON.stringify({ Usuario }),
  });

  if (response.ok) {
    console.log('Usuario eliminado correctamente');
  } else {
    console.error('Error al eliminar el usuario');
  }
};


        
    </script>
</body>
</html>
